KCPSM6 Assembler log file for program 'Z:\home\chase\github\FPGA_VHDL\lab6\lab6.srcs\lab6_starter.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 31 Jul 2018
Assembly timestamp: 18:28:40

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 057 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 88
Memory locations available: 4008


Assembly listing

 Addr Code               Instruction

 000                     ; Author: K. Newlander
 000                     ; LAB6 Starter Design that contains a global register that defaults to 0 on startup
 000                     ; Adds '1' for each press of BTNR
 000                     ; Subtracts '1' for each press of BTNL
 000                     ; Extra ASM to fix issue with Vivado (see documentation), Skips Address 03
 000  22004              JUMP 004[cold_start]
 001  22004              JUMP 004[cold_start]
 002  22004              JUMP 004[cold_start]
 003  22004              JUMP 004[cold_start]
 004                     ; Cold Start
 004         cold_start: 
 004                     ; SLIDERS are assigned to PORT 02
 004                     ; PUSHBTNs are assigned to PORT 03
 004                     ; PUSHBTN(0) is used to add 1
 004                     ; PUSHBTN(1) is used to subtract 1
 004                     ; PUSHBTN(3) is used to reset design
 004                     ; NOTE: (s# usage):
 004                     ; s0,s1,s2 - Used in delay subroutines
 004                     ; s3 - Stores global register for value to display
 004                     ; s5 - Stores the debounced push btn signal
 004                     ; s6 - Debounced register
 004  01300       reset: LOAD s3, 00
 005  01400              LOAD s4, 00              ;reset ALU setpoint to 0
 006  2D304              OUTPUT s3, 04            ;display reset values
 007  2D405              OUTPUT s4, 05
 008  01500              LOAD s5, 00
 009  01600              LOAD s6, 00
 00A  01700              LOAD s7, 00
 00B  01800              LOAD s8, 00
 00C  01900              LOAD s9, 00
 00D  01A00              LOAD sA, 00
 00E  01B00              LOAD sB, 00
 00F  01C00              LOAD sC, 00
 010                     ;; wait for btn 3 to be depressed to exit reset state
 010  09503              INPUT s5, 03
 011  0D508              TEST s5, 08
 012  36004              JUMP NZ, 004[reset]      ;stay in reset until 'depressed'
 013                     ; Main Processing Loop
 013                     ; Runs debouncer on input push btns
 013                     ; Checks current state of push btns to perform operation
 013  09503      mainlp: INPUT s5, 03             ; store push buttons
 014  09702              INPUT s7, 02             ; store sliders not debouncing them
 015  2004E              CALL 04E[del10ms]        ; delay 10ms
 016  09603              INPUT s6, 03             ; store push buttons again
 017  02560              AND s5, s6               ; AND push buttons to only keep signals high if held for 10ms
 018                     ;split the switch registers
 018  00870              LOAD s8, s7
 019  0380F              AND s8, 0F
 01A  00970              LOAD s9, s7
 01B  039F0              AND s9, F0
 01C                     ; Determine if Btn0 was pressed
 01C  0D501              TEST s5, 01
 01D  34023              CALL NZ, 023[opstests]   ; Start subtraction
 01E                     ; Determine if Btn3 was pressed
 01E  0D508              TEST s5, 08
 01F  36004              JUMP NZ, 004[reset]
 020                     ; Update Displays
 020  2D304              OUTPUT s3, 04            ; Update Display with ALU REG
 021  2D405              OUTPUT s4, 05
 022  22013              JUMP 013[mainlp]
 023  0D910    opstests: TEST s9, 10
 024  3602C              JUMP NZ, 02C[opadd]
 025  0D920              TEST s9, 20
 026  36032              JUMP NZ, 032[opsub]
 027  0D940              TEST s9, 40
 028  36035              JUMP NZ, 035[opshift]
 029  0D980              TEST s9, 80
 02A  36038              JUMP NZ, 038[opmultiply]
 02B  25000              RETURN 
 02C                     ; ADD OPERATION
 02C                     ; Handles Carry
 02C  10380       opadd: ADD s3, s8               ; ADD 1 to register
 02D  13400              ADDCY s4, 00             ; carry in to top part of the byte
 02E  09503       opend: INPUT s5, 03
 02F  0D501              TEST s5, 01              ;check btn0 and only exit this function if button isn't pressed
 030  3602E              JUMP NZ, 02E[opend]      ;stay in this routine until btn is depressed
 031  25000              RETURN 
 032                     ; SUBTRACT OPERATION
 032  18380       opsub: SUB s3, s8               ; subtract the 4 switch value from bottom half of byte
 033  1B400              SUBCY s4, 00             ;
 034  2202E              JUMP 02E[opend]
 035  14306     opshift: SL0 s3                   ; insert 0 on the right
 036  14400              SLA s4                   ; add in the carry bit.
 037  2202E              JUMP 02E[opend]
 038  01A01  opmultiply: LOAD sA, 01
 039  00B30              LOAD sB, s3
 03A  00C40              LOAD sC, s4
 03B  01D00              LOAD sD, 00
 03C  01E00              LOAD sE, 00
 03D  0C8A0   multloop1: TEST s8, sA
 03E  32041              JUMP Z, 041[no_add1]
 03F  10DB0              ADD sD, sB
 040  12EC0              ADDCY sE, sC
 041  14B06     no_add1: SL0 sB
 042  14C00              SLA sC
 043  14A06              SL0 sA
 044  03A0F              AND sA, 0F               ; only loop 4 times
 045  3603D              JUMP NZ, 03D[multloop1]
 046  003D0              LOAD s3, sD
 047  004E0              LOAD s4, sE
 048  2202E              JUMP 02E[opend]
 049                     ;;HELPER FUNCTIONS FROM TESTPROG (used for delay in top level, added a 10ms delay)
 049  09007       delms: INPUT s0, 07
 04A  09107     delmslp: INPUT s1, 07
 04B  1C010              COMPARE s0, s1
 04C  3204A              JUMP Z, 04A[delmslp]
 04D  25000              RETURN 
 04E  012F5     del10ms: LOAD s2, F5              ;load 245
 04F  20049   del10mslp: CALL 049[delms]
 050  11201              ADD s2, 01
 051  3604F              JUMP NZ, 04F[del10mslp]
 052  25000              RETURN 
 053  01205    del250ms: LOAD s2, 05
 054  20049  del250mslp: CALL 049[delms]
 055  11201              ADD s2, 01
 056  36054              JUMP NZ, 054[del250mslp]
 057  25000              RETURN 


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

Z:\home\chase\github\FPGA_VHDL\lab6\lab6.srcs\lab6_starter.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   18'd         
 timestamp_minutes 28'd         
 timestamp_seconds 40'd         
 datestamp_year    18'd         
 datestamp_month   7'd          
 datestamp_day     31'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "31 Jul 2018"  
 timestamp$        "18:28:40"     



List of line labels

   Label        Addr  Source PSM File

   cold_start   004   lab6_starter.psm
   reset        004   lab6_starter.psm
   mainlp       013   lab6_starter.psm
   opstests     023   lab6_starter.psm
   opadd        02C   lab6_starter.psm
   opend        02E   lab6_starter.psm
   opsub        032   lab6_starter.psm
   opshift      035   lab6_starter.psm
   opmultiply   038   lab6_starter.psm
   multloop1    03D   lab6_starter.psm
   no_add1      041   lab6_starter.psm
   delms        049   lab6_starter.psm
   delmslp      04A   lab6_starter.psm
   del10ms      04E   lab6_starter.psm
   del10mslp    04F   lab6_starter.psm
 * del250ms     053   lab6_starter.psm
   del250mslp   054   lab6_starter.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             21
 STAR              -

 AND               4
 OR                -
 XOR               -

 ADD               4
 ADDCY             2
 SUB               1
 SUBCY             1

 TEST              9
 TESTCY            -
 COMPARE           1
 COMPARECY         -

 SL0               3
 SL1               -
 SLX               -
 SLA               2
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             7
 OUTPUT            4
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             20
 JUMP@             -
 CALL              4
 CALL@             -
 RETURN            5
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
